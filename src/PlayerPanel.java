
import com.sun.glass.events.KeyEvent;
import java.awt.Graphics;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Andrew
 */
public class PlayerPanel extends javax.swing.JPanel {

    MainWindow mainWindow;
            
    /**
     * Creates new form PlayerPanel
     */
    public PlayerPanel() {
        initComponents();
        weaponsTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        weaponsTable.getColumnModel().getColumn(0).setPreferredWidth(30);
        weaponsTable.getColumnModel().getColumn(1).setPreferredWidth(150);
        weaponsTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        weaponsTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        updateInfo(null);
    }

    public void setMainWindow(MainWindow mainWindow) {
        this.mainWindow = mainWindow;
    }

    public StatsPanel getStatsPanel() {
        return statsPanel;
    }

    public JTextField getPlayerName() {
        return playerName;
    }
    
    public void updateInfo(PlayerInfo playerInfo) {
        if (playerInfo != null) {
            if (playerInfo.isLivesChanged())
                livesLabel.setText(((Integer)playerInfo.getLives()).toString());

            if (playerInfo.isHealthChanged())
                healthBar.setValue(playerInfo.getHealth());

            if (playerInfo.isArmorChanged())
                armorBar.setValue(playerInfo.getArmor());
            
            if (playerInfo.isWeaponsChanged()) {
                DefaultTableModel tm = (DefaultTableModel)weaponsTable.getModel();
                ArrayList<Weapon> wl = playerInfo.getWeapons();
                tm.setRowCount(wl.size());
                int bulNum;
				for (int i=0; i<wl.size(); i++) {
                    tm.setValueAt(i+1, i, 0);
                    tm.setValueAt(wl.get(i).getName().replace("_", " "), i, 1);
                    bulNum = wl.get(i).getBulletsInMagazine();
					tm.setValueAt(bulNum == -1 ? "unlimited" : bulNum, i, 2);
                    bulNum = wl.get(i).getBulletsNumber();
                    tm.setValueAt(bulNum == -1 ? "unlimited" : bulNum, i, 3);
                }
            }
            
            int weapon = playerInfo.getWeapon();
            if (playerInfo.isWeaponsChanged() || playerInfo.isWeaponChanged()) {
                if (weapon == -1)
                    weaponsTable.clearSelection();
                else
                    weaponsTable.setRowSelectionInterval(weapon, weapon);
            }
            
            if (playerInfo.isReloadChanged()) {
                if (weapon == -1) {
                    reloadBar.setValue(0);
                }else{
                    int reloadTime = playerInfo.getMaxReload();
                    if (reloadTime == 0) {
                        reloadBar.setMaximum(1);
                        reloadBar.setValue(1);
                    }else{
                        reloadBar.setMaximum(reloadTime);
                        reloadBar.setValue(reloadTime - playerInfo.getReload());
                    }
                }
            }
        }else{
            livesLabel.setText("-");
            healthBar.setValue(0);
            armorBar.setValue(0);
            reloadBar.setValue(0);
            ((DefaultTableModel)weaponsTable.getModel()).setRowCount(0);
        }
    }
    
/*    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        if (game != null) {
            game.drawTo(g, 0, 0, 11);
        }
        //g.drawString("Cool Hackathon!", 20, 20);
    }*/
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        playerName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        reloadBar = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        weaponsTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        livesLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        healthBar = new javax.swing.JProgressBar();
        statsPanel = new StatsPanel();
        jLabel6 = new javax.swing.JLabel();
        armorBar = new javax.swing.JProgressBar();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Player name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabel1, gridBagConstraints);

        playerName.setEnabled(false);
        playerName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                playerNameMousePressed(evt);
            }
        });
        playerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                playerNameKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(playerName, gridBagConstraints);

        jLabel2.setText("Weapon reload:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabel2, gridBagConstraints);

        reloadBar.setValue(100);
        reloadBar.setMinimumSize(new java.awt.Dimension(10, 20));
        reloadBar.setPreferredSize(new java.awt.Dimension(146, 20));
        reloadBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(reloadBar, gridBagConstraints);

        weaponsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "â„–", "Weapon name", "Magazine", "Bullets num."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        weaponsTable.setEnabled(false);
        jScrollPane2.setViewportView(weaponsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        add(jScrollPane2, gridBagConstraints);

        jLabel3.setText("Lives:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabel3, gridBagConstraints);

        livesLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        livesLabel.setText("5");
        livesLabel.setMaximumSize(new java.awt.Dimension(7, 20));
        livesLabel.setMinimumSize(new java.awt.Dimension(7, 20));
        livesLabel.setPreferredSize(new java.awt.Dimension(7, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(livesLabel, gridBagConstraints);

        jLabel5.setText("Health:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabel5, gridBagConstraints);

        healthBar.setValue(60);
        healthBar.setMaximumSize(new java.awt.Dimension(32767, 20));
        healthBar.setMinimumSize(new java.awt.Dimension(10, 20));
        healthBar.setPreferredSize(new java.awt.Dimension(146, 20));
        healthBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(healthBar, gridBagConstraints);

        statsPanel.setMinimumSize(new java.awt.Dimension(10, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.5;
        add(statsPanel, gridBagConstraints);

        jLabel6.setText("Armor:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabel6, gridBagConstraints);

        armorBar.setValue(60);
        armorBar.setMaximumSize(new java.awt.Dimension(32767, 20));
        armorBar.setMinimumSize(new java.awt.Dimension(10, 20));
        armorBar.setPreferredSize(new java.awt.Dimension(146, 20));
        armorBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(armorBar, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void playerNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_playerNameKeyPressed
        String name;
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                playerName.setEnabled(false);
                if (mainWindow != null)
                    mainWindow.requestFocus();
                name = playerName.getText().trim();
                playerName.setText(name);
                if (name.isEmpty()) {
                    name = mainWindow.game.getPlayerName();
                    if (name != null)
                        playerName.setText(name.replace("_", " "));
                }else{
                    mainWindow.game.setPlayerName(name.replace(" ", "_"));
                    mainWindow.game.notifyUpdatesListener(UpdateType.UPD_PLAYER_NAME);
                }
                break;
                
            case KeyEvent.VK_ESCAPE:
                playerName.setEnabled(false);
                if (mainWindow != null)
                    mainWindow.requestFocus();
                name = mainWindow.game.getPlayerName();
                if (name != null)
                    playerName.setText(name.replace("_", " "));
                else
                    playerName.setText("");
                break;
        }
    }//GEN-LAST:event_playerNameKeyPressed

    private void playerNameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerNameMousePressed
        playerName.setEnabled(true);
        playerName.requestFocus();
    }//GEN-LAST:event_playerNameMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar armorBar;
    private javax.swing.JProgressBar healthBar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel livesLabel;
    private javax.swing.JTextField playerName;
    private javax.swing.JProgressBar reloadBar;
    private StatsPanel statsPanel;
    private javax.swing.JTable weaponsTable;
    // End of variables declaration//GEN-END:variables
}
